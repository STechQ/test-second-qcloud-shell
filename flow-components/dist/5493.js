"use strict";exports.id=5493,exports.ids=[5493],exports.modules={5493:(e,o,r)=>{r.r(o),r.d(o,{fromTokenFile:()=>d,fromWebToken:()=>s});class t extends Error{constructor(e,o=!0){let r,n=!0;"boolean"==typeof o?(r=void 0,n=o):null!=o&&"object"==typeof o&&(r=o.logger,n=o.tryNextLink??!0),super(e),this.name="ProviderError",this.tryNextLink=n,Object.setPrototypeOf(this,t.prototype),r?.debug?.(`@smithy/property-provider ${n?"->":"(!)"} ${e}`)}static from(e,o=!0){return Object.assign(new this(e.message,o),e)}}class n extends t{constructor(e,o=!0){super(e,o),this.name="CredentialsProviderError",Object.setPrototypeOf(this,n.prototype)}}var i=r(7147);const s=e=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");const{roleArn:o,roleSessionName:t,webIdentityToken:n,providerId:i,policyArns:s,policy:d,durationSeconds:l}=e;let{roleAssumerWithWebIdentity:c}=e;if(!c){const{getDefaultRoleAssumerWithWebIdentity:o}=await r.e(8565).then(r.bind(r,8565));c=o({...e.clientConfig,credentialProviderLogger:e.logger,parentClientConfig:e.parentClientConfig},e.clientPlugins)}return c({RoleArn:o,RoleSessionName:t??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:n,ProviderId:i,PolicyArns:s,Policy:d,DurationSeconds:l})},d=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");const o=e?.webIdentityTokenFile??process.env.AWS_WEB_IDENTITY_TOKEN_FILE,r=e?.roleArn??process.env.AWS_ROLE_ARN,t=e?.roleSessionName??process.env.AWS_ROLE_SESSION_NAME;if(!o||!r)throw new n("Web identity configuration not specified",{logger:e.logger});return s({...e,webIdentityToken:(0,i.readFileSync)(o,{encoding:"ascii"}),roleArn:r,roleSessionName:t})()}}};