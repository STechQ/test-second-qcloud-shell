"use strict";exports.id=3449,exports.ids=[3449],exports.modules={3449:(e,s,t)=>{t.r(s),t.d(s,{fromSSO:()=>he,isSsoProfile:()=>j,validateSsoProfile:()=>ge});class o extends Error{constructor(e,s=!0){let t,n=!0;"boolean"==typeof s?(t=void 0,n=s):null!=s&&"object"==typeof s&&(t=s.logger,n=s.tryNextLink??!0),super(e),this.name="ProviderError",this.tryNextLink=n,Object.setPrototypeOf(this,o.prototype),t?.debug?.(`@smithy/property-provider ${n?"->":"(!)"} ${e}`)}static from(e,s=!0){return Object.assign(new this(e.message,s),e)}}class n extends o{constructor(e,s=!0){super(e,s),this.name="CredentialsProviderError",Object.setPrototypeOf(this,n.prototype)}}var r=t(2037),i=t(1017);const c={},a=()=>{const{HOME:e,USERPROFILE:s,HOMEPATH:t,HOMEDRIVE:o=`C:${i.sep}`}=process.env;if(e)return e;if(s)return s;if(t)return`${o}${t}`;const n=process&&process.geteuid?`${process.geteuid()}`:"DEFAULT";return c[n]||(c[n]=(0,r.homedir)()),c[n]};var l=t(6113),f=t(7147);const{readFile:u}=f.promises;var d,g,h,p,S,w,_;!function(e){e.HEADER="header",e.QUERY="query"}(d||(d={})),function(e){e.HEADER="header",e.QUERY="query"}(g||(g={})),function(e){e.HTTP="http",e.HTTPS="https"}(h||(h={})),function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"}(p||(p={})),function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"}(S||(S={})),function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"}(w||(w={})),function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(_||(_={}));const O=e=>Object.entries(e).filter((([e])=>{const s=e.indexOf(k);return-1!==s&&Object.values(w).includes(e.substring(0,s))})).reduce(((e,[s,t])=>{const o=s.indexOf(k);return e[s.substring(0,o)===w.PROFILE?s.substring(o+1):s]=t,e}),{...e.default&&{default:e.default}}),E=()=>process.env.AWS_CONFIG_FILE||(0,i.join)(a(),".aws","config"),y=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,i.join)(a(),".aws","credentials"),m=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,T=["__proto__","profile __proto__"],R=e=>{const s={};let t,o;for(const n of e.split(/\r?\n/)){const e=n.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){t=void 0,o=void 0;const s=e.substring(1,e.length-1),n=m.exec(s);if(n){const[,e,,s]=n;Object.values(w).includes(e)&&(t=[e,s].join(k))}else t=s;if(T.includes(s))throw new Error(`Found invalid profile name "${s}"`)}else if(t){const r=e.indexOf("=");if(![0,-1].includes(r)){const[i,c]=[e.substring(0,r).trim(),e.substring(r+1).trim()];if(""===c)o=i;else{o&&n.trimStart()===n&&(o=void 0),s[t]=s[t]||{};const e=o?[o,i].join(k):i;s[t][e]=c}}}}return s},{readFile:x}=f.promises,C={},I=(e,s)=>(C[e]&&!s?.ignoreCache||(C[e]=x(e,"utf8")),C[e]),b=()=>({}),k=".",v=e=>Object.entries(e).filter((([e])=>e.startsWith(w.SSO_SESSION+k))).reduce(((e,[s,t])=>({...e,[s.substring(s.indexOf(k)+1)]:t})),{}),A=()=>({}),j=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name);class $ extends Error{constructor(e,s=!0){let t,o=!0;"boolean"==typeof s?(t=void 0,o=s):null!=s&&"object"==typeof s&&(t=s.logger,o=s.tryNextLink??!0),super(e),this.name="ProviderError",this.tryNextLink=o,Object.setPrototypeOf(this,$.prototype),t?.debug?.(`@smithy/property-provider ${o?"->":"(!)"} ${e}`)}static from(e,s=!0){return Object.assign(new this(e.message,s),e)}}class F extends ${constructor(e,s=!0){super(e,s),this.name="TokenProviderError",Object.setPrototypeOf(this,F.prototype)}}const P={},D=()=>{const{HOME:e,USERPROFILE:s,HOMEPATH:t,HOMEDRIVE:o=`C:${i.sep}`}=process.env;if(e)return e;if(s)return s;if(t)return`${o}${t}`;const n=process&&process.geteuid?`${process.geteuid()}`:"DEFAULT";return P[n]||(P[n]=(0,r.homedir)()),P[n]},L=e=>{const s=(0,l.createHash)("sha1").update(e).digest("hex");return(0,i.join)(D(),".aws","sso","cache",`${s}.json`)},{readFile:H}=f.promises;var N,U,W,M,q,V,G;!function(e){e.HEADER="header",e.QUERY="query"}(N||(N={})),function(e){e.HEADER="header",e.QUERY="query"}(U||(U={})),function(e){e.HTTP="http",e.HTTPS="https"}(W||(W={})),function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"}(M||(M={})),function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"}(q||(q={})),function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"}(V||(V={})),function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(G||(G={}));const K=e=>Object.entries(e).filter((([e])=>{const s=e.indexOf(te);return-1!==s&&Object.values(V).includes(e.substring(0,s))})).reduce(((e,[s,t])=>{const o=s.indexOf(te);return e[s.substring(0,o)===V.PROFILE?s.substring(o+1):s]=t,e}),{...e.default&&{default:e.default}}),Q=()=>process.env.AWS_CONFIG_FILE||(0,i.join)(D(),".aws","config"),Y=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,i.join)(D(),".aws","credentials"),J=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,z=["__proto__","profile __proto__"],B=e=>{const s={};let t,o;for(const n of e.split(/\r?\n/)){const e=n.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){t=void 0,o=void 0;const s=e.substring(1,e.length-1),n=J.exec(s);if(n){const[,e,,s]=n;Object.values(V).includes(e)&&(t=[e,s].join(te))}else t=s;if(z.includes(s))throw new Error(`Found invalid profile name "${s}"`)}else if(t){const r=e.indexOf("=");if(![0,-1].includes(r)){const[i,c]=[e.substring(0,r).trim(),e.substring(r+1).trim()];if(""===c)o=i;else{o&&n.trimStart()===n&&(o=void 0),s[t]=s[t]||{};const e=o?[o,i].join(te):i;s[t][e]=c}}}}return s},{readFile:X}=f.promises,Z={},ee=(e,s)=>(Z[e]&&!s?.ignoreCache||(Z[e]=X(e,"utf8")),Z[e]),se=()=>({}),te=".",oe=e=>Object.entries(e).filter((([e])=>e.startsWith(V.SSO_SESSION+te))).reduce(((e,[s,t])=>({...e,[s.substring(s.indexOf(te)+1)]:t})),{}),ne=()=>({}),re="To refresh this SSO session run 'aws sso login' with the corresponding profile.",ie={},ce=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new F(`Token is expired. ${re}`,!1)},ae=(e,s,t=!1)=>{if(void 0===s)throw new F(`Value not present for '${e}' in SSO Token${t?". Cannot refresh":""}. ${re}`,!1)},{writeFile:le}=f.promises,fe=new Date(0),ue=!1,de=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:o,ssoRegion:r,ssoRoleName:c,ssoClient:f,clientConfig:d,profile:g,logger:h})=>{let p;const S="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{const e=await((e={})=>async()=>{e.logger?.debug("@aws-sdk/token-providers - fromSso");const s=await(async e=>{const s=await(async(e={})=>{const{filepath:s=Y(),configFilepath:t=Q()}=e,o=D();let n=s;s.startsWith("~/")&&(n=(0,i.join)(o,s.slice(2)));let r=t;t.startsWith("~/")&&(r=(0,i.join)(o,t.slice(2)));const c=await Promise.all([ee(r,{ignoreCache:e.ignoreCache}).then(B).then(K).catch(se),ee(n,{ignoreCache:e.ignoreCache}).then(B).catch(se)]);return{configFile:c[0],credentialsFile:c[1]}})(e);return((...e)=>{const s={};for(const t of e)for(const[e,o]of Object.entries(t))void 0!==s[e]?Object.assign(s[e],o):s[e]=o;return s})(s.configFile,s.credentialsFile)})(e),o=(e=>e.profile||process.env.AWS_PROFILE||"default")(e),n=s[o];if(!n)throw new F(`Profile '${o}' could not be found in shared credentials file.`,!1);if(!n.sso_session)throw new F(`Profile '${o}' is missing required property 'sso_session'.`);const r=n.sso_session,c=await(async(e={})=>ee(e.configFilepath??Q()).then(B).then(oe).catch(ne))(e),a=c[r];if(!a)throw new F(`Sso session '${r}' could not be found in shared credentials file.`,!1);for(const e of["sso_start_url","sso_region"])if(!a[e])throw new F(`Sso session '${r}' is missing required property '${e}'.`,!1);a.sso_start_url;const l=a.sso_region;let f;try{f=await(async e=>{const s=L(e),t=await H(s,"utf8");return JSON.parse(t)})(r)}catch(e){throw new F(`The SSO session token associated with profile=${o} was not found or is invalid. ${re}`,!1)}ae("accessToken",f.accessToken),ae("expiresAt",f.expiresAt);const{accessToken:u,expiresAt:d}=f,g={token:u,expiration:new Date(d)};if(g.expiration.getTime()-Date.now()>3e5)return g;if(Date.now()-fe.getTime()<3e4)return ce(g),g;ae("clientId",f.clientId,!0),ae("clientSecret",f.clientSecret,!0),ae("refreshToken",f.refreshToken,!0);try{fe.setTime(Date.now());const e=await(async(e,s)=>{const{CreateTokenCommand:o}=await t.e(4191).then(t.bind(t,4191)),n=await(async e=>{const{SSOOIDCClient:s}=await t.e(4191).then(t.bind(t,4191));if(ie[e])return ie[e];const o=new s({region:e});return ie[e]=o,o})(s);return n.send(new o({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))})(f,l);ae("accessToken",e.accessToken),ae("expiresIn",e.expiresIn);const s=new Date(Date.now()+1e3*e.expiresIn);try{await((e,s)=>{const t=L(e),o=JSON.stringify(s,null,2);return le(t,o)})(r,{...f,accessToken:e.accessToken,expiresAt:s.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:s}}catch(e){return ce(g),g}})({profile:g})();p={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new n(e.message,{tryNextLink:ue,logger:h})}else try{p=await(async e=>{const s=(e=>{const s=(0,l.createHash)("sha1").update(e).digest("hex");return(0,i.join)(a(),".aws","sso","cache",`${s}.json`)})(e),t=await u(s,"utf8");return JSON.parse(t)})(e)}catch(e){throw new n(`The SSO session associated with this profile is invalid. ${S}`,{tryNextLink:ue,logger:h})}if(new Date(p.expiresAt).getTime()-Date.now()<=0)throw new n(`The SSO session associated with this profile has expired. ${S}`,{tryNextLink:ue,logger:h});const{accessToken:w}=p,{SSOClient:_,GetRoleCredentialsCommand:O}=await t.e(1106).then(t.bind(t,1106)),E=f||new _(Object.assign({},d??{},{region:d?.region??r}));let y;try{y=await E.send(new O({accountId:o,roleName:c,accessToken:w}))}catch(e){throw new n(e,{tryNextLink:ue,logger:h})}const{roleCredentials:{accessKeyId:m,secretAccessKey:T,sessionToken:R,expiration:x,credentialScope:C,accountId:I}={}}=y;if(!(m&&T&&R&&x))throw new n("SSO returns an invalid temporary credential.",{tryNextLink:ue,logger:h});return{accessKeyId:m,secretAccessKey:T,sessionToken:R,expiration:new Date(x),...C&&{credentialScope:C},...I&&{accountId:I}}},ge=(e,s)=>{const{sso_start_url:t,sso_account_id:o,sso_region:r,sso_role_name:i}=e;if(!(t&&o&&r&&i))throw new n(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e},he=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:s,ssoAccountId:t,ssoRegion:o,ssoRoleName:r,ssoSession:c}=e,{ssoClient:l}=e,f=(e=>e.profile||process.env.AWS_PROFILE||"default")(e);if(s||t||o||r||c){if(s&&t&&o&&r)return de({ssoStartUrl:s,ssoSession:c,ssoAccountId:t,ssoRegion:o,ssoRoleName:r,ssoClient:l,clientConfig:e.clientConfig,profile:f});throw new n('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{const t=(await(async e=>{const s=await(async(e={})=>{const{filepath:s=y(),configFilepath:t=E()}=e,o=a();let n=s;s.startsWith("~/")&&(n=(0,i.join)(o,s.slice(2)));let r=t;t.startsWith("~/")&&(r=(0,i.join)(o,t.slice(2)));const c=await Promise.all([I(r,{ignoreCache:e.ignoreCache}).then(R).then(O).catch(b),I(n,{ignoreCache:e.ignoreCache}).then(R).catch(b)]);return{configFile:c[0],credentialsFile:c[1]}})(e);return((...e)=>{const s={};for(const t of e)for(const[e,o]of Object.entries(t))void 0!==s[e]?Object.assign(s[e],o):s[e]=o;return s})(s.configFile,s.credentialsFile)})(e))[f];if(!t)throw new n(`Profile ${f} was not found.`,{logger:e.logger});if(!j(t))throw new n(`Profile ${f} is not configured with SSO credentials.`,{logger:e.logger});if(t?.sso_session){const r=await(async(e={})=>I(e.configFilepath??E()).then(R).then(v).catch(A))(e),i=r[t.sso_session],c=` configurations in profile ${f} and sso-session ${t.sso_session}`;if(o&&o!==i.sso_region)throw new n("Conflicting SSO region"+c,{tryNextLink:!1,logger:e.logger});if(s&&s!==i.sso_start_url)throw new n("Conflicting SSO start_url"+c,{tryNextLink:!1,logger:e.logger});t.sso_region=i.sso_region,t.sso_start_url=i.sso_start_url}const{sso_start_url:r,sso_account_id:c,sso_region:u,sso_role_name:d,sso_session:g}=ge(t,e.logger);return de({ssoStartUrl:r,ssoSession:g,ssoAccountId:c,ssoRegion:u,ssoRoleName:d,ssoClient:l,clientConfig:e.clientConfig,profile:f})}}}};